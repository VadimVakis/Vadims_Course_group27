{
	"info": {
		"_postman_id": "4143db44-52c4-4775-8e86-d220bb2049ed",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Проверить, что в body приходит правильный string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Check status code is 200 - user_info_3\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Vadim\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"26\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(450);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"request - name\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"request - age\", function () {\r",
							"        pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"request - salary\", function () {\r",
							"        pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"})\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary*4\", function () {\r",
							"        pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadim",
							"type": "default"
						},
						{
							"key": "age",
							"value": "26",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "450",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var getreq = pm.request.url.query.toObject()\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(getreq.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {\r",
							"        pm.expect(jsonData.age).to.eql(getreq.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function () {\r",
							"        pm.expect(jsonData.salary).to.eql(+getreq.salary);\r",
							"})\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name\", function () {\r",
							"    var dog_parameter_name = pm.response.json().family.pets.dog;\r",
							"    pm.expect(dog_parameter_name).to.have.any.key(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age\", function () {\r",
							"    var dog_parameter_age = pm.response.json().family.pets.dog;\r",
							"    pm.expect(dog_parameter_age).to.have.any.key(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"var value_Lucky = jsonData.family.pets.dog.name;\r",
							"pm.test(\"Проверить, что параметр name имеет значение Luky\", function () {\r",
							"    pm.expect(value_Lucky).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"console.log(jsonData.family)\r",
							"var value_4 = jsonData.family.pets.dog.age;\r",
							"pm.test(\"Проверить, что параметр age имеет значение 4\", function () {\r",
							"    pm.expect(value_4).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vadim&age=26&salary=450",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "450"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var getreq = pm.request.url.query.toObject()\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(getreq.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {\r",
							"   pm.expect(jsonData.age).to.eql(+getreq.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(getreq)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request\", function () {\r",
							"  pm.expect(jsonData.salary[0]).to.eql(+getreq.salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что 1-й элемент параметра salary равен salary*2 из request\", function () {\r",
							"  pm.expect(+jsonData.salary[1]).to.eql(+getreq.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что 2-й элемент параметра salary равен salary*3 из request\", function () {\r",
							"  pm.expect(+jsonData.salary[2]).to.eql(+getreq.salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name_1\", getreq.name);\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age_1\", getreq.age);\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary_1\", getreq.salary);\r",
							"//18. Передать в окружение переменную name\r",
							"//19. Передать в окружение переменную age\r",
							"//20. Передать в окружение переменную salary\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var salary = jsonData.salary;\r",
							"for (var qwe = 0; qwe < salary.length; qwe++){\r",
							"    console.log(\"salary \" + qwe + salary[qwe])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vadim&age=26&salary=450",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadim"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "450"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//http://162.55.220.72:5005/user_info_2\r",
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Проверить, что json response имеет параметр person\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var req = request.data;\r",
							"var req_salary = req.salary;\r",
							"console.log(typeof(req_salary));\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request\", function () {\r",
							" pm.expect(jsonData.start_qa_salary).to.eql(+req_salary);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"  pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months из request\", function () {\r",
							"  pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year из request\", function () {\r",
							"  pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years из request\", function () {\r",
							"  pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							" pm.expect(jsonData.person.u_name[1]).to.eql(+req_salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var req_age = req.age;\r",
							"console.log(typeof(req_age));\r",
							"pm.test(\"Проверить, что что параметр u_age равен age из request\", function () {\r",
							" pm.expect(jsonData.person.u_age).to.eql(+req_age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"  pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//for (var i in jsonData.person){\r",
							"  //  console.log(\"${i} = ${jsonData.person[i]}\")\r",
							"//}\r",
							"//for (i in obj){\r",
							"//consol.log(i)};\r",
							"for (var i in jsonData.person){\r",
							"   console.log( i = jsonData.person[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name_1}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age_1}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary_1}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}